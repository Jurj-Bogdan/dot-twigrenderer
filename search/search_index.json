{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"../../README.md","title":"Home"},{"location":"v3/configuration/","text":"Configuration Register dot-twigrenderer 's ConfigProvider in your application's configurations by adding the following line to config/config.php : \\Dot\\Twig\\ConfigProvider::class,","title":"Configuration"},{"location":"v3/configuration/#configuration","text":"Register dot-twigrenderer 's ConfigProvider in your application's configurations by adding the following line to config/config.php : \\Dot\\Twig\\ConfigProvider::class,","title":"Configuration"},{"location":"v3/examples/","text":"Examples Authentication Extension Authorization Extension Date Extension Flash Messenger Extension Form Elements Extension Navigation Extension Translation Extension","title":"Examples Overview"},{"location":"v3/examples/#examples","text":"Authentication Extension Authorization Extension Date Extension Flash Messenger Extension Form Elements Extension Navigation Extension Translation Extension","title":"Examples"},{"location":"v3/installation/","text":"Installation Run the following command in your project folder composer require dotkernel/dot-twigrenderer","title":"Installation"},{"location":"v3/installation/#installation","text":"Run the following command in your project folder composer require dotkernel/dot-twigrenderer","title":"Installation"},{"location":"v3/overview/","text":"Overview dot-twigrenderer is a wrapper on top of mezzio/mezzio-twigrenderer","title":"Overview"},{"location":"v3/overview/#overview","text":"dot-twigrenderer is a wrapper on top of mezzio/mezzio-twigrenderer","title":"Overview"},{"location":"v3/usage/","text":"Usage Basic usage to access and use the twigrenderer object in your services: Method #1 - Factory Method #2 - Injection","title":"Usage"},{"location":"v3/usage/#usage","text":"Basic usage to access and use the twigrenderer object in your services: Method #1 - Factory Method #2 - Injection","title":"Usage"},{"location":"v3/examples/example-authentication-ext/","text":"Using the authentication extension Dot-twigrenderer extends Twig with functions that use functionality from laminas/laminas-authentication to check if the user is authenticated and to get the authenticated identity object respectively. public function hasIdentity(): bool; public function getIdentity(): ?IdentityInterface; Example usage {% if hasIdentity() %} Welcome, {% getIdentity().username %}! {% endif %}","title":"Authentication Extension"},{"location":"v3/examples/example-authentication-ext/#using-the-authentication-extension","text":"Dot-twigrenderer extends Twig with functions that use functionality from laminas/laminas-authentication to check if the user is authenticated and to get the authenticated identity object respectively. public function hasIdentity(): bool; public function getIdentity(): ?IdentityInterface;","title":"Using the authentication extension"},{"location":"v3/examples/example-authentication-ext/#example-usage","text":"{% if hasIdentity() %} Welcome, {% getIdentity().username %}! {% endif %}","title":"Example usage"},{"location":"v3/examples/example-authorization-ext/","text":"Using the authorization extension Dot-twigrenderer extends Twig with a function that uses functionality from dotkernel/dot-authorization to check if a logged user is authorized to access a particular resource. public function isGranted(string $permission = ''): bool; The function returns a boolean value of true if the logged user has access to the requested permission. Example usage Expanding on the example from the authentication extension: {% if hasIdentity() %} Welcome, {% getIdentity().username %}! {% if isGranted({{ role }}) %} {# your code #} {% endif %} {% endif %}","title":"Authentication Extension"},{"location":"v3/examples/example-authorization-ext/#using-the-authorization-extension","text":"Dot-twigrenderer extends Twig with a function that uses functionality from dotkernel/dot-authorization to check if a logged user is authorized to access a particular resource. public function isGranted(string $permission = ''): bool; The function returns a boolean value of true if the logged user has access to the requested permission.","title":"Using the authorization extension"},{"location":"v3/examples/example-authorization-ext/#example-usage","text":"Expanding on the example from the authentication extension: {% if hasIdentity() %} Welcome, {% getIdentity().username %}! {% if isGranted({{ role }}) %} {# your code #} {% endif %} {% endif %}","title":"Example usage"},{"location":"v3/examples/example-date-ext/","text":"Using the date extension Dot-twigrenderer extends Twig with a function that calculates the difference between two dates. The function converts dates to a time ago string like Facebook and Twitter has. If null is passed as the second or third parameters, the current time will be used. public function diff( Environment $env, string|DateTimeInterface|null $date, string|DateTimeZone|null $now = null ): string; Example usage Pass Twig's Environment to the template $loader = new \\Twig\\Loader\\FilesystemLoader(__DIR__ . '/../../templates/page'); $twigEnv = new \\Twig\\Environment($loader); $this-&gt;template-&gt;render('page::templateName', [ \"env\" =&gt; $twigEnv, #other parameters ]); This enables the use of the diff function: {{ diff(env, '2024-02-20', '2024-02-18') }}","title":"Date Extension"},{"location":"v3/examples/example-date-ext/#using-the-date-extension","text":"Dot-twigrenderer extends Twig with a function that calculates the difference between two dates. The function converts dates to a time ago string like Facebook and Twitter has. If null is passed as the second or third parameters, the current time will be used. public function diff( Environment $env, string|DateTimeInterface|null $date, string|DateTimeZone|null $now = null ): string;","title":"Using the date extension"},{"location":"v3/examples/example-date-ext/#example-usage","text":"Pass Twig's Environment to the template $loader = new \\Twig\\Loader\\FilesystemLoader(__DIR__ . '/../../templates/page'); $twigEnv = new \\Twig\\Environment($loader); $this-&gt;template-&gt;render('page::templateName', [ \"env\" =&gt; $twigEnv, #other parameters ]); This enables the use of the diff function: {{ diff(env, '2024-02-20', '2024-02-18') }}","title":"Example usage"},{"location":"v3/examples/example-flash-messenger-ext/","text":"Using the flash messenger extension Dot-twigrenderer extends Twig with functions that use functionality from dotkernel/dot-flashMessenger to list messages or partial messages. public function renderMessages( ?string $type = null, string $channel = FlashMessengerInterface::DEFAULT_CHANNEL ): string; // empty response public function function renderMessagesPartial( string $partial, array $params = [], ?string $type = null, string $channel = FlashMessengerInterface::DEFAULT_CHANNEL ): string; renderMessagesPartial returns messages previously passed to dot-flashMessenger . The last 3 parameters can be omitted to list all messages sent to FlashMessenger. $partial is the template file name $params is an optional array of items (key-value) passed to the template file $type is an optional item that identifies a subkey of FlashMessenger's channel array $channel is an optional item that identifies FlashMessenger's channel Example usage {{ renderMessagesPartial('page:partial') }}","title":"Flash Messenger Extension"},{"location":"v3/examples/example-flash-messenger-ext/#using-the-flash-messenger-extension","text":"Dot-twigrenderer extends Twig with functions that use functionality from dotkernel/dot-flashMessenger to list messages or partial messages. public function renderMessages( ?string $type = null, string $channel = FlashMessengerInterface::DEFAULT_CHANNEL ): string; // empty response public function function renderMessagesPartial( string $partial, array $params = [], ?string $type = null, string $channel = FlashMessengerInterface::DEFAULT_CHANNEL ): string; renderMessagesPartial returns messages previously passed to dot-flashMessenger . The last 3 parameters can be omitted to list all messages sent to FlashMessenger. $partial is the template file name $params is an optional array of items (key-value) passed to the template file $type is an optional item that identifies a subkey of FlashMessenger's channel array $channel is an optional item that identifies FlashMessenger's channel","title":"Using the flash messenger extension"},{"location":"v3/examples/example-flash-messenger-ext/#example-usage","text":"{{ renderMessagesPartial('page:partial') }}","title":"Example usage"},{"location":"v3/examples/example-form-elements-ext/","text":"Using the form elements extension Dot-twigrenderer extends Twig with a function based on TwigTest that checks if each Form element is an instance of its class. public function getTests(): array; Example usage {% if false not in getTests() %} {# your code #} {% endif %}","title":"Form Elements Extension"},{"location":"v3/examples/example-form-elements-ext/#using-the-form-elements-extension","text":"Dot-twigrenderer extends Twig with a function based on TwigTest that checks if each Form element is an instance of its class. public function getTests(): array;","title":"Using the form elements extension"},{"location":"v3/examples/example-form-elements-ext/#example-usage","text":"{% if false not in getTests() %} {# your code #} {% endif %}","title":"Example usage"},{"location":"v3/examples/example-navigation-ext/","text":"Using the navigation extension Dot-twigrenderer extends Twig with functions that use functionality from dotkernel/dot-navigation to easily parse a menu and to display escaped HTML inside a template. public function htmlAttributes(Page $page): string; public function renderMenu(NavigationContainer|string $container): string; //incomplete? public function renderMenuPartial( NavigationContainer|string $container, string $partial, array $params = [] ): string; $partial is the template file name $params is an optional array of items (key-value) passed to the template file","title":"Navigation Extension"},{"location":"v3/examples/example-navigation-ext/#using-the-navigation-extension","text":"Dot-twigrenderer extends Twig with functions that use functionality from dotkernel/dot-navigation to easily parse a menu and to display escaped HTML inside a template. public function htmlAttributes(Page $page): string; public function renderMenu(NavigationContainer|string $container): string; //incomplete? public function renderMenuPartial( NavigationContainer|string $container, string $partial, array $params = [] ): string; $partial is the template file name $params is an optional array of items (key-value) passed to the template file","title":"Using the navigation extension"},{"location":"v3/examples/example-translation-ext/","text":"Using the translation extension Dot-twigrenderer extends Twig with a filter called trans that parses translations in singular and plural forms. The local.php.dist file in frontend provides an example for working with multiple languages. The translator variable can be expanded to other languages using Poedit which can edit .po files like the example in data/language/da_DK/LC_MESSAGES/messages.po . The compiled file will have the extension .mo To apply the translations the twig templates need either {% trans 'translateText' %} or {{ translateText|trans }} then the js file needs translateText(\"translateText\") NOTE: In order to have a proper behaviour of language selector, you need the language pack installed at the Operating System level. dnf install glibc-all-langpacks Then restart PHP-FPM.","title":"Translation Extension"},{"location":"v3/examples/example-translation-ext/#using-the-translation-extension","text":"Dot-twigrenderer extends Twig with a filter called trans that parses translations in singular and plural forms. The local.php.dist file in frontend provides an example for working with multiple languages. The translator variable can be expanded to other languages using Poedit which can edit .po files like the example in data/language/da_DK/LC_MESSAGES/messages.po . The compiled file will have the extension .mo To apply the translations the twig templates need either {% trans 'translateText' %} or {{ translateText|trans }} then the js file needs translateText(\"translateText\") NOTE: In order to have a proper behaviour of language selector, you need the language pack installed at the Operating System level. dnf install glibc-all-langpacks Then restart PHP-FPM.","title":"Using the translation extension"},{"location":"v3/usage/factory/","text":"Method #1 - Factory Step 1: Create a factory that retrieves the SessionManger from the container class ExampleFactory { // code public function __invoke(ContainerInterface $container) { return new ExampleService( $container-&gt;get(TemplateRendererInterface::class) ) } } Step 2: Access through your Service class ExampleService { private TemplateRendererInterface $template; public function __construct(TemplateRendererInterface $template) { $this-&gt;template = $template; } //your methods } Step 3: Register the factory Open the ConfigProvider of the module where your repository resides. Add a new entry under factories , where the key is your service's FQCN and the value is your factory's FQCN. See below example for a better understanding of the file structure. &lt;?php declare(strict_types=1); namespace YourApp; class ConfigProvider { public function __invoke(): array { return [ 'dependencies' =&gt; $this-&gt;getDependencies(), ]; } public function getDependencies(): array { return [ 'factories' =&gt; [ ExampleService::class =&gt; ExampleFactory::class, ], ]; } }","title":"Inject using a factory"},{"location":"v3/usage/factory/#method-1-factory","text":"","title":"Method #1 - Factory"},{"location":"v3/usage/factory/#step-1-create-a-factory-that-retrieves-the-sessionmanger-from-the-container","text":"class ExampleFactory { // code public function __invoke(ContainerInterface $container) { return new ExampleService( $container-&gt;get(TemplateRendererInterface::class) ) } }","title":"Step 1: Create a factory that retrieves the SessionManger from the container"},{"location":"v3/usage/factory/#step-2-access-through-your-service","text":"class ExampleService { private TemplateRendererInterface $template; public function __construct(TemplateRendererInterface $template) { $this-&gt;template = $template; } //your methods }","title":"Step 2: Access through your Service"},{"location":"v3/usage/factory/#step-3-register-the-factory","text":"Open the ConfigProvider of the module where your repository resides. Add a new entry under factories , where the key is your service's FQCN and the value is your factory's FQCN. See below example for a better understanding of the file structure. &lt;?php declare(strict_types=1); namespace YourApp; class ConfigProvider { public function __invoke(): array { return [ 'dependencies' =&gt; $this-&gt;getDependencies(), ]; } public function getDependencies(): array { return [ 'factories' =&gt; [ ExampleService::class =&gt; ExampleFactory::class, ], ]; } }","title":"Step 3: Register the factory"},{"location":"v3/usage/injection/","text":"Method #2 - Injection If you are using dot-annotated-services in your project, you don't need to create a separate factory, just follow the below steps. Step 1: Access through your Service class ExampleService { private TemplateRendererInterface $template; /** * @Dot\\AnnotatedServices\\Annotation\\Inject({ * TemplateRendererInterface::class, * }) */ public function __construct(TemplateRendererInterface $template) { $this-&gt;template = $template; } //your methods } Step 2: Register your service Open the ConfigProvider of the module where your repository resides. Add a new entry under factories , where the key is your service's FQCN and the value is Dot\\AnnotatedServices\\Factory\\AbstractAnnotatedFactory . See below example for a better understanding of the file structure. &lt;?php declare(strict_types=1); namespace YourApp; class ConfigProvider { public function __invoke(): array { return [ 'dependencies' =&gt; $this-&gt;getDependencies(), ]; } public function getDependencies(): array { return [ 'factories' =&gt; [ ExampleService::class =&gt; AbstractAnnotatedFactory::class, ], ]; } }","title":"Inject using dot-annotated-services"},{"location":"v3/usage/injection/#method-2-injection","text":"If you are using dot-annotated-services in your project, you don't need to create a separate factory, just follow the below steps.","title":"Method #2 - Injection"},{"location":"v3/usage/injection/#step-1-access-through-your-service","text":"class ExampleService { private TemplateRendererInterface $template; /** * @Dot\\AnnotatedServices\\Annotation\\Inject({ * TemplateRendererInterface::class, * }) */ public function __construct(TemplateRendererInterface $template) { $this-&gt;template = $template; } //your methods }","title":"Step 1: Access through your Service"},{"location":"v3/usage/injection/#step-2-register-your-service","text":"Open the ConfigProvider of the module where your repository resides. Add a new entry under factories , where the key is your service's FQCN and the value is Dot\\AnnotatedServices\\Factory\\AbstractAnnotatedFactory . See below example for a better understanding of the file structure. &lt;?php declare(strict_types=1); namespace YourApp; class ConfigProvider { public function __invoke(): array { return [ 'dependencies' =&gt; $this-&gt;getDependencies(), ]; } public function getDependencies(): array { return [ 'factories' =&gt; [ ExampleService::class =&gt; AbstractAnnotatedFactory::class, ], ]; } }","title":"Step 2: Register your service"}]}